package mop;

import java.util.*;
import java.lang.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if the argument of Collections.sort(List<T>) is not comparable.
 *
 * All elements in the argument of Collections.sort(List<T>) must implement
 * the Comparable interface, and they must be mutually comparable.
 * http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#sort%28java.util.List%29
 *
 * Similarly, the argument of Collections.min(Collection<T>) and
 * Collections.max(Collection<T>) must satisfy the same requirements.
 * http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#min%28java.util.Collection%29
 * http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#max%28java.util.Collection%29
 *
 * This property verifies that each element implements the Comparable
 * interface, and if comparing each pair of elements does not raise a
 * ClassCastException. This property requires O(n^2) time for n elements.
 *
 * @severity error
 */

Collections_ImplementComparable() {
	event e49 before(List list) :
		call(void Collections.sort(List)) && args(list) {
	}

	event e48 before(Collection col) :
		(
			call(* Collections.min(Collection)) ||
			call(* Collections.max(Collection))
		) && args(col) {
	}
}

